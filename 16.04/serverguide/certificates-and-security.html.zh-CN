<!DOCTYPE html>
<html lang=zh-CN>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>证书</title>
<link rel="stylesheet" type="text/css" href="zh_CN.css">
<script type="text/javascript" src="jquery.js"></script><script type="text/javascript" src="jquery.syntax.js"></script><script type="text/javascript" src="yelp.js"></script>
</head>
<body id="home">
<script src="https://ssl.google-analytics.com/urchin.js" type="text/javascript"></script><script type="text/javascript">
        _uacct = "UA-1018242-8";
        urchinTracker();
      </script><div id="container">
<div id="container-inner">
<div id="mothership"><ul>
<li><a href="http://www.ubuntu.com/partners">Partners</a></li>
<li><a href="http://www.ubuntu.com/support">Support</a></li>
<li><a href="http://www.ubuntu.com/community">Community</a></li>
<li><a href="http://www.ubuntu.com">Ubuntu.com</a></li>
</ul></div>
<div id="header">
<h1 id="ubuntu-header"><a href="https://help.ubuntu.com/">Ubuntu Documentation</a></h1>
<ul id="main-menu">
<li><a class="main-menu-item current" href="../../">Official Documentation</a></li>
<li><a href="https://help.ubuntu.com/community/CommunityHelpWiki">Community Help Wiki</a></li>
<li><a href="http://community.ubuntu.com/contribute/documentation/">Contribute</a></li>
</ul>
</div>
<div id="menu-search"><div id="search-box">
<noscript><form action="https://www.google.com/cse" id="cse-search-box"><div>
<input type="hidden" name="cx" value="003883529982892832976:e2vwumte3fq"><input type="hidden" name="ie" value="UTF-8"><input type="text" name="q" size="21"><input type="submit" name="sa" value="Search">
</div></form></noscript>
<script>
                document.write('<form action="../../search.html" id="cse-search-box">');
                document.write('  <div>');
                document.write('    <input type="hidden" name="cof" value="FORID:9">');
                document.write('    <input type="hidden" name="cx" value="003883529982892832976:e2vwumte3fq">');
                document.write('    <input type="hidden" name="ie" value="UTF-8">');
                document.write('    <input type="text" name="q" size="21">');
                document.write('    <input type="submit" name="sa" value="Search">');
                document.write('  </div>');
                document.write('</form>');
              </script>
</div></div>
<div class="trails"><div class="trail">
<a href="../../16.04" class="trail">Ubuntu 16.04</a> » <a class="trail" href="index.html" title="Ubuntu 服务器指南">Ubuntu 服务器指南</a> » <a class="trail" href="security.html" title="安全性">安全性</a> » </div></div>
<div id="cwt-content" class="clearfix content-area"><div id="page">
<div id="content">
<div class="links nextlinks">
<a class="nextlinks-prev" href="apparmor.html" title="AppArmor">上一页</a><a class="nextlinks-next" href="ecryptfs.html" title="eCryptfs">下一页</a>
</div>
<div class="hgroup"><h1 class="title">证书</h1></div>
<div class="region">
<div class="contents">
<p class="para"><span class="em emphasis">公开密钥加密</span>是当今使用最普遍的加密方式之一。公开密钥加密利用一个<span class="em emphasis">公钥</span>和一个<span class="em emphasis">私钥</span>来完成加解密。系统使用公钥来<span class="em emphasis">加密</span>信息，加密后的信息只有用<span class="em emphasis">私钥</span>才可以解密。</p>
<p class="para">
            A common use for public-key cryptography is encrypting application traffic using a Secure Socket Layer (SSL) or 
            Transport Layer Security (TLS) connection. One example: configuring Apache to provide <span class="em emphasis">HTTPS</span>, the
            HTTP protocol over SSL. This allows a way to encrypt traffic using a protocol that does not itself provide encryption.
            </p>
<p class="para">
            A <span class="em emphasis">Certificate</span> is a method used to distribute a <span class="em emphasis">public key</span> and other information
            about a server and the organization who is responsible for it. Certificates can be digitally signed by a 
            <span class="em emphasis">Certification Authority</span>, or CA. A CA is a trusted third party that has confirmed that the information
            contained in the certificate is accurate.
            </p>
</div>
<div class="links sectionlinks" role="navigation"><ul>
<li class="links"><a class="xref" href="certificates-and-security.html#types-of-certificates" title="证书类型">证书类型</a></li>
<li class="links"><a class="xref" href="certificates-and-security.html#generating-a-csr" title="生成一个证书签署请求 (CSR)">生成一个证书签署请求 (CSR)</a></li>
<li class="links"><a class="xref" href="certificates-and-security.html#creating-a-self-signed-certificate" title="创建一个自己签署的证书">创建一个自己签署的证书</a></li>
<li class="links"><a class="xref" href="certificates-and-security.html#installing-the-certificate" title="安装证书">安装证书</a></li>
<li class="links"><a class="xref" href="certificates-and-security.html#certificate-authority" title="认证机构">认证机构</a></li>
<li class="links"><a class="xref" href="certificates-and-security.html#certificate-references" title="参考资料">参考资料</a></li>
</ul></div>
<div class="sect2 sect" id="types-of-certificates"><div class="inner">
<div class="hgroup"><h2 class="title">证书类型</h2></div>
<div class="region"><div class="contents">
<p class="para">大多数情况下，要配置一个使用公开密钥加密的安全服务器，你需要：（1）向CA发送你的证书请求（CSR，里面包含你的公钥），证明你的公司的身份，并且付给CA一定的费用 （2）CA验证你的证书请求和身份，并且使用它的私钥签名，制作成证书发回来。或者，你可以自己创建一个<span class="em emphasis">自签名<span class="em emphasis">的证书。</span></span></p>
<div class="note" title="备注"><div class="inner"><div class="region"><div class="contents">
              <p class="para">
              Note that self-signed certificates should not be used in most production environments.
              </p>
            </div></div></div></div>
<p class="para">继续HTTPS的例子，一个CA签署的证书可以提供两个自签名证书不能提供的重要的能力：</p>
<div class="list itemizedlist"><ul class="list itemizedlist">
<li class="list itemizedlist">
            <p class="para">浏览器 (通常) 会自动地识别证书并且在不提示用户的情况下允许创建一个安全连接。</p>
            </li>
<li class="list itemizedlist">
            <p class="para">当一个 CA 生成一个签署过的证书，它为提供网页给浏览器的组织提供身份担保。</p>
            </li>
</ul></div>
<p class="para">
             Most Web browsers, and computers, that support SSL have a list of CAs whose
             certificates they automatically accept. If a browser
             encounters a certificate whose authorizing CA is not in the
             list, the browser asks the user to either accept or decline
             the connection. Also, other applications may generate an error message when using
             a self-signed certificate.
            </p>
<p class="para">从CA获得一个数字证书相当简单。下面是简要步骤：</p>
<div class="list orderedlist"><ol class="list orderedlist">
<li class="list orderedlist">
               <p class="para">创建一个私有和公共密钥对</p>
            </li>
<li class="list orderedlist">
                 <p class="para">基于公钥创建一个证书请求。证书请求包含您服务器及公司信息。</p>
            </li>
<li class="list orderedlist">
                 <p class="para">发送证书请求，并随之提供您的身份文档到一个 CA。我们不能告诉您选择哪个证书颁发机构。您可以基于您以往的经验或您朋友或同事的经验或纯粹基于经济因素来决定。</p>

                    <p class="para">一旦您选定一家 CA，您需要根据他们所提供的规程来从他们那里获得证书。</p>
            </li>
<li class="list orderedlist">
               <p class="para">当 CA 确定您确实如您所声称的那样时，他们将发给您一个数字证书。</p>
            </li>
<li class="list orderedlist">
              <p class="para">将此证书安装到您的安全服务器，并使用证书配置相应的程序。</p>
            </li>
</ol></div>
</div></div>
</div></div>
<div class="sect2 sect" id="generating-a-csr"><div class="inner">
<div class="hgroup"><h2 class="title">生成一个证书签署请求 (CSR)</h2></div>
<div class="region"><div class="contents">
<p class="para">无论您是从一家 CA 那儿获得证书或是生成您自己签署的证书，第一步就是生成钥匙。</p>
<p class="para">       
          If the certificate will be used by service daemons, such as Apache, Postfix, Dovecot, etc., 
          a key without a passphrase is often appropriate. Not having a passphrase allows the services
          to start without manual intervention, usually the preferred way to start a daemon.
          </p>
<p class="para">这一节的内容包括生成有密码保护和没有密码保护的密钥。没有密码保护的密钥将被用做生成一个可被各种服务使用的数字证书。</p>
<div class="note note-warning" title="警告"><div class="inner"><div class="region"><div class="contents">
            <p class="para">使用没有密码保护的私钥来运行服务很方便，因为你不需要在每次启动服务的时候输入密码。但是这是不安全的，而且对私钥的威胁同样也是对服务器的威胁。</p>
          </div></div></div></div>
<p class="para">在终端提示符下运行以下命令来为这个证书签名请求(CSR)生成<span class="em emphasis">keys</span>：</p>
<div class="screen"><pre class="contents "><span class="cmd command">openssl genrsa -des3 -out server.key 2048</span>
</pre></div>
<div class="code"><pre class="contents ">Generating RSA private key, 2048 bit long modulus
..........................++++++
.......++++++
e is 65537 (0x10001)
Enter pass phrase for server.key:
</pre></div>
<p class="para">您现在可以输入您的 passphrase。为了最大程度的安全，它至少应该包含八个字符。当指定 -des3 时最小长度为四个字符。它应该包含数字和/或标点符号，并且不应该是字典中的单词。也请记住您的 passphrase 是大小写敏感的。</p>
<p class="para">
        Re-type the passphrase to verify. Once you have re-typed it
        correctly, the server key is generated and stored in the
        <span class="file filename">server.key</span> file.
        </p>
<p class="para">
        Now create the insecure key, the one without a passphrase, and shuffle 
        the key names:
        </p>
<div class="screen"><pre class="contents "><span class="cmd command">openssl rsa -in server.key -out server.key.insecure</span>
<span class="cmd command">mv server.key server.key.secure</span>
<span class="cmd command">mv server.key.insecure server.key</span>
</pre></div>
<p class="para">
        The insecure key is now named <span class="file filename">server.key</span>, and you can use this
        file to generate the CSR without passphrase.
        </p>
<p class="para">要创建 CSR，可以在终端提示符后运行以下命令：</p>
<div class="screen"><pre class="contents "><span class="cmd command">openssl req -new -key server.key -out server.csr</span>
</pre></div>
<p class="para">
        It will prompt you enter the passphrase. If you enter the
        correct passphrase, it will prompt you to enter Company Name,
        Site Name, Email Id, etc.
        Once you enter all these details, your
        CSR will be created and it will be stored in the
        <span class="file filename">server.csr</span> file.
        </p>
<p class="para">
 	You can now submit this CSR file
        to a CA for processing. The CA will use this CSR file and issue
        the certificate. On the other hand, you can create self-signed
        certificate using this CSR.</p>
</div></div>
</div></div>
<div class="sect2 sect" id="creating-a-self-signed-certificate"><div class="inner">
<div class="hgroup"><h2 class="title">创建一个自己签署的证书</h2></div>
<div class="region"><div class="contents">
<p class="para">要创建自己签署的证书，在终端提示符下运行以下命令：</p>
<div class="screen"><pre class="contents "><span class="cmd command">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span>
</pre></div>
<p class="para">上述命令将提示您输入 passphrase。一旦您输入正确的 passphrase，您的证书将被创建并将保存在 <span class="file filename">server.crt</span> 文件中。</p>
<div class="note note-warning" title="警告"><div class="inner"><div class="region"><div class="contents">
        <p class="para">如果您的安全服务器被用在生产环境中，你也许需要 CA 签署的证书。并不推荐使用自己签署的证书。</p>
        </div></div></div></div>
</div></div>
</div></div>
<div class="sect2 sect" id="installing-the-certificate"><div class="inner">
<div class="hgroup"><h2 class="title">安装证书</h2></div>
<div class="region"><div class="contents">
<p class="para">您可以通过在终端提示符下运行以下命令来安装密钥文件<span class="file filename">server.key</span>和证书文件<span class="file filename">server.crt</span>，或是由您的CA签发的证书文件。</p>
<div class="screen"><pre class="contents "><span class="cmd command">sudo cp server.crt /etc/ssl/certs</span>
<span class="cmd command">sudo cp server.key /etc/ssl/private</span>
</pre></div>
<p class="para">
        Now simply configure any applications, with the ability to use public-key cryptography, to use
        the <span class="em emphasis">certificate</span> and <span class="em emphasis">key</span> files. For example, <span class="app application">Apache</span> can 
        provide HTTPS, <span class="app application">Dovecot</span> can provide IMAPS and POP3S, etc. 
        </p>
</div></div>
</div></div>
<div class="sect2 sect" id="certificate-authority"><div class="inner">
<div class="hgroup"><h2 class="title">认证机构</h2></div>
<div class="region"><div class="contents">
<p class="para">
          If the services on your network require more than a few self-signed certificates it may be worth the 
          additional effort to setup your own internal <span class="em emphasis">Certification Authority (CA)</span>. Using 
          certificates signed by your own CA, allows the various services using the certificates to easily
          trust other services using certificates issued from the same CA.
          </p>
<div class="steps"><div class="inner"><ol class="steps">
<li class="steps">
  
              <p class="para">首先，创建一个目录，用来存放CA证书及其相关文件：</p>    

<div class="screen"><pre class="contents "><span class="cmd command">sudo mkdir /etc/ssl/CA</span>
<span class="cmd command">sudo mkdir /etc/ssl/newcerts</span>
</pre></div>

            </li>
<li class="steps">
  
              <p class="para">
              The CA needs a few additional files to operate, one to keep track of the last serial number used by the CA, each 
              certificate must have a unique serial number, and another file to record which certificates have been
              issued:
              </p>    

<div class="screen"><pre class="contents "><span class="cmd command">sudo sh -c "echo '01' &gt; /etc/ssl/CA/serial"</span>
<span class="cmd command">sudo touch /etc/ssl/CA/index.txt</span>
</pre></div>

            </li>
<li class="steps">
  
              <p class="para">
              The third file is a CA configuration file. Though not strictly necessary, it is very convenient when
              issuing multiple certificates. Edit <span class="file filename">/etc/ssl/openssl.cnf</span>, and in the 
              <span class="em emphasis">[ CA_default ]</span> change:
              </p>    

<div class="code"><pre class="contents ">dir             = /etc/ssl              # Where everything is kept
database        = $dir/CA/index.txt     # database index file.
certificate     = $dir/certs/cacert.pem # The CA certificate
serial          = $dir/CA/serial        # The current serial number
private_key     = $dir/private/cakey.pem# The private key
</pre></div>    

            </li>
<li class="steps">
  
              <p class="para">
              Next, create the self-signed root certificate:
              </p>    

<div class="screen"><pre class="contents "><span class="cmd command">openssl req -new -x509 -extensions v3_ca -keyout cakey.pem -out cacert.pem -days 3650</span>
</pre></div>

              <p class="para">您将被要求输入关于证书的详情。</p>

            </li>
<li class="steps">
  
              <p class="para">现在安装根证书和钥匙:</p>    

<div class="screen"><pre class="contents "><span class="cmd command">sudo mv cakey.pem /etc/ssl/private/</span>
<span class="cmd command">sudo mv cacert.pem /etc/ssl/certs/</span>
</pre></div>

            </li>
<li class="steps">
  
              <p class="para">
              You are now ready to start signing certificates. The first item needed is a Certificate Signing 
              Request (CSR), see <a class="xref" href="certificates-and-security.html#generating-a-csr" title="生成一个证书签署请求 (CSR)">生成一个证书签署请求 (CSR)</a> for details. Once
              you have a CSR, enter the following to generate a certificate signed by the CA:
              </p>    

<div class="screen"><pre class="contents "><span class="cmd command">sudo openssl ca -in server.csr -config /etc/ssl/openssl.cnf</span>
</pre></div>

              <p class="para">
              After entering the password for the CA key, you will be prompted to sign the certificate, and again
              to commit the new certificate. You should then see a somewhat large amount of output related to the 
              certificate creation.
              </p>

            </li>
<li class="steps">   

              <p class="para">
              There should now be a new file, <span class="file filename">/etc/ssl/newcerts/01.pem</span>, containing the same output. 
              Copy and paste everything beginning with the line: <span class="em emphasis">-----BEGIN CERTIFICATE-----</span> and 
              continuing through the line: <span class="em emphasis">----END CERTIFICATE-----</span> lines to a file named after the hostname 
              of the server where the certificate will be installed. For example <span class="file filename">mail.example.com.crt</span>,
              is a nice descriptive name.
              </p>

              <p class="para">随后产生的证书将被命名为<span class="file filename">02.pem</span>, <span class="file filename">03.pem</span>,等等。</p>

              <div class="note" title="备注"><div class="inner"><div class="region"><div class="contents">
                <p class="para">用你自己具有描述性的名字来替代<span class="em emphasis">mail.example.com.crt</span>。</p>
              </div></div></div></div>

            </li>
<li class="steps">
  
              <p class="para">
              Finally, copy the new certificate to the host that needs it, and configure the appropriate applications to use it.
              The default location to install certificates is <span class="file filename">/etc/ssl/certs</span>. This
              enables multiple services to use the same certificate without overly complicated file permissions.
              </p>    

              <p class="para">
              For applications that can be configured to use a CA certificate, you should also copy the 
              <span class="file filename">/etc/ssl/certs/cacert.pem</span> file to the <span class="file filename">/etc/ssl/certs/</span>
              directory on each server.
              </p>

            </li>
</ol></div></div>
</div></div>
</div></div>
<div class="sect2 sect" id="certificate-references"><div class="inner">
<div class="hgroup"><h2 class="title">参考资料</h2></div>
<div class="region"><div class="contents"><div class="list itemizedlist"><ul class="list itemizedlist">
<li class="list itemizedlist">
              <p class="para">
              For more detailed instructions on using cryptography see the
              <a href="http://tldp.org/HOWTO/SSL-Certificates-HOWTO/index.html" class="ulink" title="http://tldp.org/HOWTO/SSL-Certificates-HOWTO/index.html">SSL Certificates HOWTO</a> by tldp.org:
              </p>
            </li>
<li class="list itemizedlist">
              <p class="para">
              The Wikipedia <a href="http://en.wikipedia.org/wiki/HTTPS" class="ulink" title="http://en.wikipedia.org/wiki/HTTPS">HTTPS</a> page has more information regarding HTTPS.
              </p>
            </li>
<li class="list itemizedlist">
              <p class="para">更多关于 <span class="em emphasis">OpenSSL</span> 的信息，请参阅 <a href="http://www.openssl.org/" class="ulink" title="http://www.openssl.org/">OpenSSL 主页</a>。</p>
            </li>
<li class="list itemizedlist">
              <p class="para">
              Also, O'Reilly's <a href="http://oreilly.com/catalog/9780596002701/" class="ulink" title="http://oreilly.com/catalog/9780596002701/">Network Security with OpenSSL</a> is a good
              in-depth reference.
              </p>
            </li>
</ul></div></div></div>
</div></div>
</div>
<div class="links nextlinks">
<a class="nextlinks-prev" href="apparmor.html" title="AppArmor">上一页</a><a class="nextlinks-next" href="ecryptfs.html" title="eCryptfs">下一页</a>
</div>
<div class="clear"></div>
</div>
<div id="pagebottom"></div>
</div></div>
</div>
<div id="footer"><p>The material in this document is available under a free license, see <a href="../../legal.html">Legal</a> for details.<br>
          For information on contributing see the <a href="https://wiki.ubuntu.com/DocumentationTeam">Ubuntu Documentation Team wiki page</a>.
          To report errors in this serverguide documentation, <a href="https://bugs.launchpad.net/serverguide">file a bug report</a>.</p></div>
</div>
</body>
</html>
